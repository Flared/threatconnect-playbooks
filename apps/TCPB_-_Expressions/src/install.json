{
  "allowOnDemand": true,
  "appId": "24a7eda9-f279-5671-b0f6-26b0f7f01a6d",
  "displayName": "Expressions",
  "features": [
    "aotExecutionEnabled",
    "appBuilderCompliant",
    "fileParams",
    "secureParams",
    "layoutEnabledApp"
  ],
  "labels": [],
  "languageVersion": "3.6",
  "listDelimiter": "|",
  "minServerVersion": "6.0.0",
  "note": "This application parses expressions and returns expression results.  The expression\ngrammar is similar to Python, but not exactly identical.  See ebnf-syntax below for the\ncomplete extended Bachus Naur format of the grammar.  Some notable differences from\nPython syntax are no methods on objects or variables, no list comprehensions.\n\nConstants are case-insensitive, although any variables defined from loops are\ncase sensitive, as are attributes or dictionary keys.\n\nThreatConnect variables (e.g. `#App:1234:variable!String`) are evaluated on resolution\nto determine if they are valid expressions, and the expression result is used\nif they are.  If a variable is a string, it will be coerced to a float or an integer\non demand by most functions that expect float or integer arguments.  Note that JSON\ndata is expression grammar compatible, so an expression like\n`#App:1234:json_object!String.field` is valid so long as `json_object` is a JSON\ndictionary.\n\n\nThe following actions are included:\n\n  - **Evaluate** - A direct evaluation of an expression with either single or multiple results.\n\n  - **Evaluate Many** - Perform multiple evaluations, one set to define variables, another to define outputs.\n\n  - **Evaluate in Loop** - Loop evaluation of the same expression while looping over the inputs. Inputs with the same length are incremented in parallel.  The order of loop increments is shortest to longest.  A Loop expression which results in a list i.e [1, 2, 3] is used to extend the output rather than create nested output.  Tuple outputs will create nested output.\n\n  - **Evaluate Many With Loop** - Perform multiple evaluations, one set to define variables, another to define outputs. Loop variables with the same number of elements will be incremented concurrently, otherwise variables are incremented from shortest number of elements to largest.\nExample: If `a` is `(1,2,3)` and `b` is `(1,2,3)` and `c` is `(1,2)`, a loop expression `(a,b,c)` will yield `[(1,1,1), (1,1,2), (2,2,1), (2,2,2), (3,3,1), (3,3,2)]`.\nLoop expressions which result in lists i.e. [1, 2, 3] are used to extend the output, rather than create\nnested outputs.  Tuple outputs will create nested outputs.\n\n\n\n\n# Builtins\n\n\n## Constants\n\n  * e = 2.718281828459045\n  * pi = 3.141592653589793\n  * tau = 6.283185307179586\n  * urlre = Regular Expression\n\n        \\b\n          # Word cannot begin with special characters\n          (?<![@.,%&#-])\n          # Protocols are optional, but take them with us if they are present\n          (?P<protocol>\\w{2,10}:\\/\\/)?\n          # Domains have to be of a length of 1 chars or greater\n          ((?:\\w|\\&\\#\\d{1,5};)[.-]?)+\n          # The domain ending has to be between 2 to 15 characters\n          (\\.([a-z]{2,15})\n               # If no domain ending we want a port, only if a protocol is specified\n               |(?(protocol)(?:\\:\\d{1,6})|(?!)))\n        \\b\n        # Word cannot end with @ (made to catch emails)\n        (?![@])\n        # We accept any number of slugs, given we have a char after the slash\n        (\\/)?\n        # If we have endings like ?=fds include the ending\n        (?:([\\w\\d\\?\\-=#:%@&.;])+(?:\\/(?:([\\w\\d\\?\\-=#:%@&;.])+))*)?\n        # The last char cannot be one of these symbols .,?!,- exclude these\n        (?<![.,?!-])\n\n## Functions\n\n  * `abs(x)`\n\n    Absolute value of X\n\n  * `acos(x)`\n\n    Arc Cosine of X\n\n  * `acosh(x)`\n\n    Inverse Hyperbolic Cosine\n\n  * `alter(dictionary, key, value)`\n\n    Set a specific key in a dictionary.  Returns the value.\n\n  * `asin(x)`\n\n    Arc Sine of X\n\n  * `asinh(x)`\n\n    Inverse Hyperbolic Sine\n\n  * `atan(x)`\n\n    Arc Tangent of X\n\n  * `atanh(x)`\n\n    Inverse Hyperbolic Tangent\n\n  * `b64decode(s, altchars=None, validate=False, encoding='utf-8')`\n\n    Base 64 decode of string\n\n  * `b64encode(s, altchars=None, encoding='utf-8')`\n\n    Base 64 encode of string\n\n  * `bin(n, sign=True)`\n\n    Return the binary value of int\n\n  * `binary(s, encoding='utf-8', errors=None)`\n\n    Convert object to binary string (bytes)\n\n  * `build(*lists, keys=())`\n\n    Constructs a sequence of dictionaries based on the lists, such\n    that each dictionary contains the corresponding key for each list\n    from the keys value, and value from each list, respectively.\n    Columns without a key are ignored.  Columns that are longer than\n    the shortest column are truncated.\n\n  * `bytes(s, encoding='utf-8', errors=None)`\n\n    Convert object to binary string (bytes)\n\n  * `ceil(x)`\n\n    Ceiling of X\n\n  * `center(s, width, fillchar=' ')`\n\n    Center string in width columns\n\n  * `chardet(byteseq)`\n\n    Return a dictionary with the guessed character encoding\n    of byteseq, the confidence of the encoding, and the estimated\n    language.\n\n  * `choice(condition, true_result=None, false_result=None)`\n\n    Choice of true_result or false_result based on condition\n\n  * `chr(x)`\n\n    Return character value of x\n\n  * `conform(object_list, missing_value=None)`\n\n    Conform objects in a list to have the same structure,\n    using missing_value as the value of any missing key\n\n\n  * `copysign(x, y)`\n\n    Copy sign of X to Y\n\n  * `cos(x)`\n\n    Cosine of X\n\n  * `cosh(x)`\n\n    Hyperbolic Cosine\n\n  * `csvread(data, header=False, convert=True, delimiter=',', quote='\"', rows=0, columns=0)`\n\n    Process data as a CSV File.  Return the data as a list of rows of columns,\n    or if rows=1, return a list of columns).  If header is true, the first record\n    is discarded.  If rows or columns is nonzero, the row or column count will\n    be truncated to that number of rows or columns. If convert is True, numeric\n    values will be returned as numbers, not strings\n\n  * `csvwrite(data, delimiter=',', quote='\"')`\n\n    Write data in CSV format.  Returns a string\n\n  * `datetime(datetime, date_format=None, tz=None)`\n\n    Format a datetime object according to a format string\n\n  * `defang(s)`\n\n    Return a defanged representation of string, ie, one with\n    textual indicators of compromise converted to the defanged state\n\n  * `degrees(x)`\n\n    Convert X to degrees\n\n  * `dict(**kwargs)`\n\n    Return a dictionary of arguments\n\n  * `erf(x)`\n\n    Error Function of X\n\n  * `erfc(x)`\n\n    Complimentary Error Function of X\n\n  * `exp(x)`\n\n    Math Exp of X\n\n  * `expm1(x)`\n\n    Math Expm1 of X\n\n  * `extract_indicators(data, ignore=None, dedup=True, fang=False, convert=True)`\n\n    Extract IOCs from data, which may be bytes or string.\n    If fang is true, data is re-fanged before processing. This option is\n    ignored if the input is binary.\n    Any entity match on the ignore list will be ignored.\n    If convert is true, bytesmode matches will be converted to utf-8, or\n    the specified conversion e.g. convert='latin-1'.\n    Returns a list of (indicator, value) tuples.  If dedup is True,\n    duplicate results are not returned.\n\n  * `factorial(x)`\n\n    Factorial of X\n\n  * `fang(s)`\n\n    Return a fanged representation of string, ie, one with\n    textual indicators of compromise reverted from the defanged state\n\n  * `fetch_indicators(*search_values, default_type=None)`\n\n    Fetches available indicators from ThreatConnect based on\n    search_values.  A search value is either an indicator value (which uses\n    the default_type as the indicator type) or a (type, value) pair.  If\n    only one search_value is passed in, it may be a list of search_values.\n\n    Returns a list of [(indicator_type, indicator_value, api_entity, indicator), ...],\n    but the api_entity, result, and owners will be None if that\n    indicator was not found.\n\n\n  * `find(ob, value, start=None, stop=None)`\n\n    Find index value in ob or return -1\n\n  * `flatten(ob, prefix='')`\n\n    Flatten a possibly nested list of dictionaries to a list, prefixing keys with prefix\n\n  * `float(s)`\n\n    Return floating point value of object\n\n  * `format(s, *args, default=<object object at 0x1051b09b0>, **kwargs)`\n\n    Format string S according to Python string formatting rules.  Compound\n    structure elements may be accessed with dot or bracket notation and without quotes\n    around key names, e.g. `blob[0][events][0][source][device][ipAddress]`\n    or `blob[0].events[0].source.device.ipAddress`.  If default is set,\n    that value will be used for any missing value.\n\n  * `fuzzydist(hash1, hash2)`\n\n    Return the edit distance between two fuzzy hashes\n\n  * `fuzzyhash(data)`\n\n    Return the fuzzy hash of data\n\n  * `fuzzymatch(input1, input2)`\n\n    Return a score from 0..100 representing a poor match (0) or\n    a strong match(100) between the two inputs\n\n  * `gamma(x)`\n\n    Return the gamma function at X\n\n  * `gcd(a, b)`\n\n    Greatest Common Denominator of A and B\n\n  * `hex(n, sign=True)`\n\n    Return the hexadecimal value of int\n\n  * `hypot(x, y)`\n\n    Hypotenuse of X,Y\n\n  * `index(ob, value, start=None, stop=None)`\n\n    Index of value in ob\n\n  * `indicator_patterns()`\n\n    Returns a dictionary of regular expression patterns for indicators\n    of compromise, based on ThreatConnect Data.\n\n  * `indicator_types()`\n\n    Return the ThreatConnect Indicator Types\n\n  * `int(s, radix=None)`\n\n    Return integer value of object\n\n  * `items(ob)`\n\n    Items (key, value pairs) of dictionary\n\n  * `jmespath(path, ob)`\n\n    JMESPath search\n\n  * `join(separator, *elements)`\n\n    Join a list with separator\n\n  * `json_dump(ob, sort_keys=True, indent=2)`\n\n    Dump an object to a JSON string\n\n  * `json_load(ob)`\n\n    Load an object from a JSON string\n\n  * `keys(ob)`\n\n    Keys of dictionary\n\n  * `kvlist(dictlist, key='key', value='value')`\n\n    Return a list of dictionaries as a single dictionary with the list\n    item's key value as the key, and the list item's value value as the value.\n    Duplicate keys will promote the value to a list of values.\n\n  * `len(container)`\n\n    Length of an iterable\n\n  * `lgamma(x)`\n\n    Return the natural logarithm of the absolute value of the gamma function at X\n\n  * `locale_currency(val, symbol=True, grouping=False, international=False, locale='EN_us')`\n\n    Format a currency value according to locale settings\n\n  * `locale_format(fmt, val, grouping=False, monetary=False, locale='EN_us')`\n\n    Format a number according to locale settings\n\n  * `log(x, base=None)`\n\n    Math Logarithm of X to base\n\n  * `log10(x)`\n\n    Math log base 10 of X\n\n  * `log1p(x)`\n\n    Math log1p of x\n\n  * `log2(x)`\n\n    Math log base 2 of X\n\n  * `lower(s)`\n\n    Lowercase string\n\n  * `lstrip(s, chars=None)`\n\n    Strip chars from left of string\n\n  * `max(*items)`\n\n    Return the greatest value of the list\n\n  * `md5(data)`\n\n    Return MD5 hash of data\n\n  * `merge(*iterables, replace=False)`\n\n    Merges a list of iterables into a single list.\n    If the iterables are dictionaries, they are updated into a\n    single dictionary per row.  If replace is true, subsequent\n    columns overwrite the original values.  The result length\n    is constrained to the shortest column.\n\n  * `min(*items)`\n\n    Return the least value of the list\n\n  * `namevallist(ob, namekey='name', valuekey='value')`\n\n    Return a dictionary formatted as a list of name=name, value=value dictionaries\n\n  * `ord(char)`\n\n    Return ordinal value of char\n\n  * `pad(iterable, length, padvalue=None)`\n\n    Pad iterable to length\n\n  * `partitionedmerge(array1, array2)`\n\n    Merges two arrays of strings to a single array with ordering\n    preserved between partitions in the arrays.  Common lines are partitions\n    subject to the ordering of the partitions being the same in each array.\n\n    For example partitionedmerge(['A', 'a1', 'a2', 'B', 'b1', 'b2', 'D'],\n    ['A', 'a3', 'a4', 'B', 'b3', 'b4', 'C', 'c1', 'c2', 'D'])\n\n    is\n\n    ['A', 'a1', 'a2', 'a3', 'a4', 'B', 'b1', 'b2', 'b3', 'b4', 'C', 'c1', 'c2', 'D']\n\n    The values 'A', 'B', and 'D' act as partition lines for the merge.\n\n\n  * `pformat(ob, indent=1, width=80, compact=False)`\n\n    Pretty formatter for displaying hierarchial data\n\n  * `pivot(list_of_lists, pad=None)`\n\n    Pivots a list of lists, such that item[x][y] becomes item[y][x].\n    If the inner lists are not of even length, they will be padded with\n    the pad value.\n\n  * `pow(x, y)`\n\n    Math X ** Y\n\n  * `printf(fmt, *args)`\n\n    Format arguments according to format\n\n  * `prune(ob, depth=None, prune=(None, '', [], {}), keys=())`\n\n    Recursively Prunes entries from the object,\n    with an optional depth limit.  The pruned values, and\n    optionally prune keys may be specified.  If any dictionary\n    has a key in keys, that dictionary element will be removed.\n\n\n  * `radians(x)`\n\n    Convert X to radians\n\n  * `range(start_or_stop, stop=None, step=None)`\n\n    Return range of values\n\n  * `refindall(pattern, string, flags='')`\n\n    Find all instances of the regular expression in source\n\n  * `rematch(pattern, string, flags='')`\n\n    Regular expression match pattern to source\n\n  * `replace(s, source, target)`\n\n    Replace chars on S\n\n  * `report(data, columns=None, title=None, header=True, width=None, prolog=None, epilog=None, sort=None, filter=None)`\n\n    Generates a text report of data in columnar format.  Data is either a list of\n    dictionaries, or a list of lists of columnar data.  If a list of lists,\n    then the first row is the header row of the data.\n\n    Columns is a list of row specifiers or a single row specifier, which is a list of\n    column definitions.  If there are multiple row specifiers, each record takes up\n    multiple output rows.\n\n    A row specifier is either an ordered dictionary of name: column specifier or\n    a list of (name, column specifier) tuples.\n\n    A column specifier is width[:height][/option[=value]][/option[=value]]...\n    If rows are lists of lists (e.g. CSV data) and no column specifiers are used, the\n    widths will be automatically calculated.\n\n    Options:\n\n    - align=left|right|center\n\n    - value=format    - format for values e.g. {lineno}.\n    to add a . after lineno\n\n    - error=value     - value to use if the value= format causes an error\n\n    - notrim          - Don't trim leading/trailing space\n\n    - hang=n          - Hanging paragraph by N spaces\n\n    - indent=n        - Indent paragraph by N spaces\n\n    - split=n         - split at n% through the column (default 80)\n    if necessary\n\n    - label=string    - heading label\n\n    - doublenl        - Double newlines (ie, add line after paragraph)\n\n    - nohyphenate     - Don't hyphenate value\n\n    If sort is specified, it is a column or list of columns to sort by, with the column\n    name optionally prefixed with a '-' to do a descending sort.\n\n    If filter is specified, it is an expression that must be true for that record to appear\n    in the result, e.g. filter=\"salary>70000\".\n\n\n  * `research(pattern, string, flags='')`\n\n    Regular expression search pattern to source\n\n  * `rexxparse(source, template, strip=False, convert=False, **kwargs)`\n\n    REXX parse of source using template.  If strip is True, values are stripped,\n    if convert is True, values are converted to float or int if possible.  Any other\n    keyword arguments are made available for indirect pattern substitution, in\n    addition to the standard variables.\n\n  * `round(number, digits=0)`\n\n    Round number to digits decimal places\n\n  * `rstrip(s, chars=None)`\n\n    Strip chars from right of string\n\n  * `sha1(data)`\n\n    Return SHA1 hash of data\n\n  * `sha256(data)`\n\n    Return SHA256 hash of data\n\n  * `sin(x)`\n\n    Sine of X\n\n  * `sinh(x)`\n\n    Hyperbolic Sine\n\n  * `sort(*elements)`\n\n    Sort array\n\n  * `split(string, separator=None, maxsplit=-1)`\n\n    Split a string into elements\n\n  * `sqrt(x)`\n\n    Square root of X\n\n  * `str(s, encoding='utf-8')`\n\n    Return string representation of object\n\n  * `strip(s, chars=None)`\n\n    Strip chars from ends of string\n\n  * `structure(ob)`\n\n    Return a reduced structure of the object, useful for comparisons\n\n  * `sum(*elements)`\n\n    Sum a list of elements\n\n  * `tan(x)`\n\n    Tangent of X\n\n  * `tanh(x)`\n\n    Hyperbolic Tangent\n\n  * `timedelta(datetime_1, datetime_2)`\n\n    Return the delta between time 1 and time 2\n\n  * `title(s)`\n\n    Title of string\n\n  * `trunc(x)`\n\n    Math Truncate X\n\n  * `twoscompliment(n, bits=32)`\n\n    Return the twos compliment of N with the desired word width\n\n  * `unique(*args)`\n\n    Return the list of unique elements of arguments, which may be a list of arguments, or a\n    single argument that is a list.  Inputs are compared by converting them to\n    sorted JSON objects, so dictionaries with the same keys and values but different\n    order will count as duplicates.\n\n  * `unnest(iterable)`\n\n    Reduces nested list to a single flattened list.  [A, B, [C, D, [E, F]]\n    turns into [A, B, C, D, E, F].\n\n  * `update(target, source, replace=True)`\n\n    Updates one dictionary with keys from the other. If the target is\n    a list of dictionaries, each dictionary will be updated.  If replace\n    is false, existing values will not be replaced.\n\n  * `upper(s)`\n\n    Uppercase string\n\n  * `url(method, url=None, **kwargs)`\n\n    A direct dispatch of requests.request with an external session.  See\n    https://docs.python-requests.org/en/latest/api for full API details.\n    Returns a Response object, but callable methods on the response are\n    not callable; retrieve the status via the .status_code attribute, or the content\n    via the .content or .text attribute.\n\n    If the URL is not specified, the first argument is assumed to be the URL\n    and the method will default to 'GET'.\n\n    If not specified, a timeout parameter of 30 seconds will be applied.\n    The stream argument will *always* be set to True.\n    The proxies argument will default to the system specified proxies.\n\n    URL requests are throttled to one request every 3 seconds.\n\n    If there is a json result, the json method on the result will\n    be replaced with a json attribute that is the result of the json\n    method, otherwise the json attribute will be set to None.\n\n    Expressions-specific kwargs:\n    rate=request rate per period  (default: 20)\n    period=number of seconds in a period (default: 60)\n    burst=number of requests to burst before throttling (default: 0)\n\n    Only one rate throttle is maintained; switching throttles with multiple\n    url function expressions will not yield intended results.\n\n\n  * `urlparse(urlstring, scheme='', allow_fragments=True)`\n\n    Parse a URL into a six component named tuple\n\n  * `urlparse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace', max_num_fields=None)`\n\n    Parse a URL query string into a dictionary.  Each value is a list.\n\n  * `uuid3(namespace, name)`\n\n    Generate a UUID based on the MD5 hash of a namespace and a name.\n    The namespace may be a UUID or one of 'dns', 'url', 'oid', or 'x500'.\n\n\n  * `uuid4()`\n\n    Generate a random UUID\n\n  * `uuid5(namespace, name)`\n\n    Generate a UUID based on the SHA-1 hash of a namespace and a name.\n    The namespace may be a UUID or one of 'dns', 'url', 'oid', or 'x500'.\n\n\n  * `values(ob)`\n\n    Values of dictionary\n\n  * `xmlread(xmldata, namespace=False, strip=True, convert=True, compact=False)`\n\n    Constructs an object from XML data.  The XML data should have\n    a single root node.  If namespace is True, the resolved namespace will\n    be prefixed to tag names in braces, i.e. {namespace}tag.  If strip\n    is True, values will be stripped of leading and trailing whitespace.\n    If convert is True, numeric values will be converted to their numeric\n    equivalents.  If compact is true, the object will be compacted to\n    a more condensed form if possible.  Attribute names will be prefixed\n    with @ in the corresponding output.\n\n\n  * `xmlwrite(obj, namespace=False, indent=0)`\n\n    Converts an object to XML.  If namespace is True or a dictionary,\n    namespace prefixed values will be converted to a derived or specified\n    namespace value.  The namespace dictionary should be in the form\n    {key: namespace} and will be used to turn the namespace back into the\n    key. If indent is nonzero, an indented XML tree with newlines will\n    be generated.  If namespaces are used, the caller must add the\n    `xmlns` attributes to an enclosing scope.\n\n\n# EBNF-Syntax\n\n    The grammar for the expressions is below.  Production rules are prefixed by -> and are used\n    to tell the parser what to do when that construct is identified.\n\n    start:  eval\n\n    eval: sum\n        | eval \"||\" sum -> logical_or\n        | eval \"&&\" sum -> logical_and\n        | eval \"or\" sum -> logical_or\n        | eval \"and\" sum -> logical_and\n        | eval \"==\" sum -> equals\n        | eval \"!=\" sum -> not_equals\n        | eval \"<\" sum -> less_than\n        | eval \">\" sum -> greater_than\n        | eval \"<=\" sum -> less_than_equal_to\n        | eval \">=\" sum -> greater_than_equal_to\n        | \"not\" eval -> not_\n        | eval \"in\" product -> in_\n        | eval \"not\" \"in\" product -> not_in_\n\n    sum: product\n        | sum \"+\" product -> add\n        | sum \"-\" product -> sub\n\n    product: raise\n        | product \"*\" raise -> mul\n        | product \"/\" raise -> div\n        | product \"%\" raise -> mod\n\n    raise: atom\n        | raise \"**\" atom -> pow\n\n    atom: FLOAT    -> num_float\n        | INT       -> num_int\n        | \"-\" atom  -> neg\n        | NAME      -> var\n        | string\n        | \"(\" eval_list \")\" -> tuple_freeze\n        | \"[\" eval_list \"]\" -> list_freeze\n        | \"{\" dict_list \"}\" -> dict_freeze\n        | NAME \"(\" arg_list \")\" -> function\n        | atom \"[\" atom \"]\" -> get\n        | atom \"[\" optional_atom \":\" optional_atom \"]\" -> get_slice\n        | atom \".\" NAME -> getattr\n\n    string: STRING     -> literal_\n        | TCVARIABLE    -> tcvariable\n        | SQUOTE_STRING -> literal_\n        | string string -> concat_string\n\n    dict_list: dict_assign         -> list_\n        | dict_list \",\" dict_assign -> list_\n        |                           -> list_\n\n    dict_assign: eval \":\" eval -> set_kwarg\n\n    eval_list: eval\n        | eval_list \",\" eval -> list_\n        | eval_list \",\"      -> list_\n        |                    -> list_\n\n    arg: eval\n        | NAME \"=\" eval -> set_kwarg\n\n    arg_list: arg\n        | arg_list \",\" arg  -> list_\n        | arg_list \",\"      -> list_\n        |                   -> list_\n\n    optional_atom:  atom\n        | -> none\n\n    TCVARIABLE: /#[A-Za-z]+:\\d+:[A-Za-z0-9_.]+!\\w+/\n    _STRING_INNER: /.*?/\n    _STRING_ESC_INNER: _STRING_INNER /(?<!\\\\)(\\\\\\\\)*?/\n    SQUOTE_STRING: \"'\" _STRING_ESC_INNER \"'\"\n\n",
  "params": [
    {
      "label": "Action",
      "name": "tc_action",
      "note": "The action to take",
      "required": true,
      "sequence": 1,
      "type": "Choice",
      "validValues": [
        "Evaluate",
        "Evaluate Many",
        "Evaluate in Loop",
        "Evaluate Many With Loop"
      ]
    },
    {
      "label": "Expression",
      "name": "expression",
      "note": "The expression to evaluate.  If the expression is a list,\ne.g. (\"foo\", 1, 5.0) the output will be a StringArray.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "required": true,
      "sequence": 2,
      "type": "String",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "label": "Variables",
      "name": "variables",
      "note": "Variables to be defined for the expressions to reference.  Defined variables are\nnot output.  Variables are evaluated in the order they are entered.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 3,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "label": "Loop Variables",
      "name": "loop_variables",
      "note": "Add a name and a value for each variable to loop over.   Loop variables with\nthe same number of elements will be incremented concurrently, variables with\ndifferent number of elements will be nested from longest to shortest.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "required": true,
      "sequence": 4,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "StringArray",
      "label": "Loop Expressions",
      "name": "loop_expressions",
      "note": "Loop outputs and loop output expressions for each output.  These may reference defined variables\nbut may not refer to other loop variables or outputs, with the exception that\nthe prior loop iteration variables are available with a leading underscore,\nand are None on the first iteration.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "required": true,
      "sequence": 5,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "String",
      "label": "Additional Outputs",
      "name": "additional_outputs",
      "note": "Outputs and output expressions for each output.  These may reference defined\nvariables and loop outputs, but may not refer to outputs not yet evaluated.\nOutputs will be generated as a single output only, with list outputs being converted to\nJSON strings.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 6,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "label": "Expression",
      "name": "loop_expression",
      "note": "The expression to evaluate.  If the expression generates a list result,\neach element of the step-wise evaluation will be appended to the final result.\nThe prior iteration may be referred to using the name `_output` and will be\nNone on the first iteration.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "required": true,
      "sequence": 7,
      "type": "String",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "String",
      "label": "Outputs",
      "name": "outputs",
      "note": "Outputs and output expressions for each output.  These may reference defined variables\nbut may not refer to outputs not yet evaluated.  Outputs will be generated as a\nsingle output only, with list outputs being converted to JSON strings.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "required": false,
      "sequence": 8,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "StringArray",
      "label": "StringArray Outputs",
      "name": "stringarray_outputs",
      "note": "Outputs to be delivered as StringArray",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity"
      ],
      "sequence": 9,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "Binary",
      "label": "Binary Outputs",
      "name": "binary_outputs",
      "note": "Outputs to be delivered as Binary",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 10,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "BinaryArray",
      "label": "Binary Array Outputs",
      "name": "binary_array_outputs",
      "note": "Outputs to be delivered as BinaryArray",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 11,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "KeyValue",
      "label": "KeyValue Outputs",
      "name": "kv_outputs",
      "note": "Outputs to be delivered as KeyValue",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 12,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "KeyValueArray",
      "label": "KeyValue Array Outputs",
      "name": "kv_array_outputs",
      "note": "Outputs to be delivered as KeyValueArray",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 13,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "TCEntity",
      "label": "TCEntity Outputs",
      "name": "tce_outputs",
      "note": "Outputs to be delivered as TCEntity.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 14,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "TCEntityArray",
      "label": "TCEntity Array Outputs",
      "name": "tce_array_outputs",
      "note": "Outputs to be delivered as TCEntityArray.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 15,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "exposePlaybookKeyAs": "TCEnhancedEntity",
      "label": "TCEnhancedEntity Outputs",
      "name": "tcee_outputs",
      "note": "Outputs to be delivered as TCEnhancedEntity.",
      "playbookDataType": [
        "String",
        "StringArray",
        "Binary",
        "BinaryArray",
        "KeyValue",
        "KeyValueArray",
        "TCEntity",
        "TCEntityArray",
        "TCEnhancedEntity",
        "TCEnhancedEntityArray"
      ],
      "sequence": 16,
      "type": "KeyValueList",
      "validValues": [
        "${TEXT}"
      ]
    },
    {
      "default": true,
      "label": "Return None on failure",
      "name": "return_none_on_failure",
      "note": "When an expression fails to evaluate, assign it the value None, and continue\nexecution.",
      "sequence": 17,
      "type": "Boolean"
    },
    {
      "default": false,
      "label": "Trace subexpression execution",
      "name": "trace",
      "note": "Trace execution of subexpresssions at DEBUG level in the application's log.",
      "sequence": 18,
      "type": "Boolean"
    }
  ],
  "playbook": {
    "outputVariables": [
      {
        "name": "expression.expression",
        "type": "String"
      },
      {
        "name": "expression.result.0",
        "type": "String"
      },
      {
        "name": "expression.result.array",
        "type": "StringArray"
      },
      {
        "name": "expression.action",
        "type": "String"
      },
      {
        "name": "expression.errors",
        "type": "StringArray"
      }
    ],
    "type": "Utility"
  },
  "programLanguage": "PYTHON",
  "programMain": "run",
  "programVersion": "1.0.10",
  "runtimeLevel": "Playbook"
}
